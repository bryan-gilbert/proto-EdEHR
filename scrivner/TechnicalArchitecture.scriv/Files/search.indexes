<?xml version="1.0" encoding="UTF-8"?>
<SearchIndexes Version="1.0">
    <Documents>
        <Document ID="12363E44-3C1A-4D1E-9902-EF3BDA7046AE">
            <Title>Requirements</Title>
            <Text>The EdEHR project charter requires ‘Open Source’.


</Text>
        </Document>
        <Document ID="BE3B1503-3BD5-40C2-91C4-FD806C2815CE">
            <Text>Google Analytics
Oh hold pending answers around privacy policies.</Text>
        </Document>
        <Document ID="90CF32B3-26F5-4D1D-A7FB-5811CE4C17E4">
            <Text>AirBnB Style Guide

Perhaps the most popular style guide is https://github.com/airbnb/javascript
A mostly reasonable approach to JavaScript
Note: this guide assumes you are using Babel, and requires that you use babel-preset-airbnb or the equivalent. It also assumes you are installing shims/polyfills in your app, with airbnb-browser-shims or the equivalent.</Text>
        </Document>
        <Document ID="F2BFCFDD-4F2A-4213-8794-007A622186DD">
            <Text>Institutions
	•	Prototype: 1 institution per instance
	•	Long term:  ditto</Text>
        </Document>
        <Document ID="5A300147-08A8-40DC-9910-2CDCDBC79B55">
            <Text>Documentation: Scrivener to Markdown
Use Scrivener for technical documentation. Compile to markdown.  Automated script appends table of contents and places resulting files into the correct location.  E.g Readme.md is placed in the root project folder.  This Technical Architecture document is placed into the docs folder.</Text>
        </Document>
        <Document ID="40C783AF-1AA2-4558-9D20-C4F604276C84">
            <Text>Application structure
From a high level view the app has three layers: 
	1.	Learning Management System 
	2.	Assignment management system
	3.	Electronic Health Record system</Text>
        </Document>
        <Document ID="228B0702-2654-4151-9B55-13F2C410F000">
            <Title>Authorization</Title>
            <Text>Authorization will be provided by LMS via LTI</Text>
        </Document>
        <Document ID="CB6AAAC6-1EA3-4685-B118-998F28DFE7CF">
            <Text>Students
	•	Prototype: 20 - 30 students per class
	•	Long term: up to 50 students per class</Text>
        </Document>
        <Document ID="19CC4AD1-7880-4909-847B-31F9B2FCAB36">
            <Text>Coding standards
For Javascript use Javascript Standard. It’s simple, automatic and definitive.
https://standardjs.com/</Text>
        </Document>
        <Document ID="2C86AB3F-DA5F-4F05-B7FA-C3F879B069AF">
            <Text>Agile tasks - Trello
Use Trello as agile team communication tool.  Put all main high level tasks in Trello as placeholders for future work. Keep these simple as they just illustrate the big picture.  Put all immediate tasks in Trello.  These are small achievable tasks that are planned for the next sprint or two or are actually in progress.  This keeps the Trello board focused on sharing with the team what are current activities and near term plans.</Text>
        </Document>
        <Document ID="0686D02E-87CF-4DA8-B343-9CC0E3FFEF51">
            <Text>Client side UI framework: Vue.js or React. TBD in the begining of October</Text>
        </Document>
        <Document ID="DF0B2F1F-A33D-4FFC-93DA-4CDD081AACC9">
            <Title>Requirements Tooling</Title>
        </Document>
        <Document ID="F954D6D3-2319-4A2C-85F4-A1AEB79688CE">
            <Text>CI CD
Continuous Integration: automated testing as part of the development lifecycle
Continuous Delivery: incrementally add value on a continuous basis.</Text>
        </Document>
        <Document ID="BEF1C03A-E0C4-4DDA-82C0-73E117567E44">
            <Text>Source Control:  Github
Initial repro is located here: https://github.com/bryan-gilbert/proto-EdEHR
Will transfer to a BCcampus repro as the project develops

Branching
To begin all rough preliminary work will be submitted to the main branch.  Yet, once development is underway all submissions will be made to a development branch.  Testing and stylistic checks will be completed before promotion to the master branch.  Changes on the master branch will be monitored by an instance of Jenkins which will start a build process on a Test server.  The developer’s goal is to not break the build. </Text>
        </Document>
        <Document ID="CABEE388-B4E8-48F3-8944-6A225F3485F0">
            <Title>Task runners</Title>
        </Document>
        <Document ID="8601F6DD-425B-4D78-82AE-2E8B338660A4">
            <Title>Analytics</Title>
        </Document>
        <Document ID="001EE362-534C-4121-997B-6646C3283490">
            <Text>Vue

Vue.js is a JavaScript framework, launched in 2013, which perfectly fits for creating highly adaptable user interfaces and sophisticated Single-page applications.

Resources
https://medium.com/@TechMagic/reactjs-vs-angular5-vs-vue-js-what-to-choose-in-2018-b91e028fa91d
https://vuejs.org/v2/guide/comparison.html
https://medium.com/fundbox-engineering/react-vs-vue-vs-angular-163f1ae7be56

Companies that use Vue.js: Xiaomi, Alibaba, WizzAir, EuroNews, Grammarly, Gitlab and Laracasts, Adobe, Behance, Codeship, Reuters.

EdEHR requirements:  (quotes from above sources in italics)
	•	Flexible:  Yes
	•	Easy to learn: Yes fast ramp up
	•	Documentation:  Detailed documentation. Vue.js has very circumstantial documentation which can fasten learning curve for developers and save a lot of time to develop an app using only the basic knowledge of HTML and JavaScript.  Yet another source says:  Lack of full English documentation. This leads to a partial complexity on some stages of development, nevertheless, more and more materials are being translated into English.
	•	Supports single page applications.
	•	Code Style: 
	•	Single File Components:  Vue.js can be used for both building single-page applications and more difficult web interfaces of apps. The main thing is that smaller interactive parts can be easily integrated into the existing infrastructure with no negative effect on the entire system.
	•	License: open
	•	Performance:  Tiny size. Vue.js can weight around 20KB keeping its speed and flexibility that allows reaching much better performance in comparison to other frameworks.
	•	Tooling: Awesome integration.  Another source says:  Fewer plugins and tools available, smaller community.
	•	Routing: Vue’s core modules (Vuex, Router, etc.) are built-in and work fantastic.
	•	State management: yes
	•	API: yes
	•	Mobile:  Vue Native and Capacitor are solutions to produce mobile targeted apps
	•	Community:  Growing
	•	Maturity: Vue.js still has a pretty small market share in comparison with React or Angular, which means that knowledge sharing in this framework is still in the beginning phase.
	•	Support: Smaller 
	•	Hiring Talent:  growing but not easy at this time
	•	Future: how are updates handled?

	•	Large scaling. Vue.js can help to develop pretty large reusable templates that can be made with no extra time allocated for that according to its simple structure.
	•	Better promotes Full-Stack culture; allows cross-product development.
	•	Not being React, devs don’t gain experience with the most popular framework today.</Text>
        </Document>
        <Document ID="967EC040-E259-4A73-BBA2-27A17FF72E9B">
            <Title>Introduction</Title>
        </Document>
        <Document ID="BDBE694C-16EA-426E-BBCC-1173D6790193">
            <Text>Requirements for EdEHR databases
WIP
	•	Flexible: because this is a rapid development prototype project it is essential that we can easily augment and change the schema without spending a lot of time on writing transformation scripts or working with transformation tooling. 
	•	Strongly typed and validation support to ensure the data in the database is valid.
	•	Rapidly convert data to and from code. (Transfer of data to and from the “objects” used in software.)
	•	Store data in easy for humans to understand format.
	•	Scalable
	•	Community Support
	•	Open Source</Text>
        </Document>
        <Document ID="7068A1C6-0766-47D6-B1B8-D12EC79E76BA">
            <Title>Application Requirements</Title>
            <Text>The following contains assumptions that need to be verified by the team.</Text>
        </Document>
        <Document ID="59E8F8E7-CE7A-4D70-898C-CACD04D1C01B">
            <Title>Testing</Title>
            <Text>Consider BURP for security testing
Consider the following for performance testing
https://www.blazemeter.com/blog/open-source-load-testing-tools-which-one-should-you-use
JMeter https://jmeter.apache.org/usermanual/get-started.html

Selinium. https://www.seleniumhq.org/
BrowserStack. https://www.browserstack.com/
https://www.browserstack.com/pricing. $29/m

JEST https://jestjs.io/

</Text>
        </Document>
        <Document ID="984D6705-2647-417B-90E0-D6723A65C663">
            <Text>MongoDB License: GNU Affero General Public License, version 3.
Manageability: MongoDB doesn’t require a specialized database administrator. Since it is fairly user-friendly in this way, it can be used by both developers and administrators.
Speed: It’s high-performing for simple queries.
Scalability: It is difficult to increase the size of a RDMS because of the table structure. It’s just plain hard to split the table across many servers.  NoSQL databases are easily split so they are the preferred choice for large or every changing data sets.
Flexibility- Firstly, the document structure is more in line with how developers code in their respective programming languages which is clear and structured in key-value pairs. This makes it easier to add and edit data/documents at any time. In a relational database, this would involve the database having to be restructured
Supports a wide range of queries – fields, expressions, range queries, JavaScript functions and more
Faster turnaround time-because related data which would be stored across several tables in a MySQL database are stored in the same document in a MongoDB
No strict schemas followed-you are allowed to create a document first before defining the structure of the document, making it very helpful for businesses who in a start-up phase who are unsure of what their database structure should look like
Like we mentioned, MongoDB’s features make it better suited to those who handle huge volumes of data
Many today consider RDMS to be unable to meet the expectations from today’s data-intensive applications.  https://blog.resellerclub.com/mongodb-vs-mysql-comparison/
</Text>
        </Document>
        <Document ID="52004D3F-FA73-42E3-93BF-E9522DC312DC">
            <Text>Browsers
Only support modern browsers
Support screen resolutions of 1024 and up. (i.e. iPads and laptops but not iPhones)</Text>
        </Document>
        <Document ID="A13CA5F9-7D9A-4C7C-883C-683D08223B4F">
            <Text>Automation of testing
Jenkins is a tool for automating a series of steps to take code from the development environment and place it into the production environment. Along the way Jenkins can run automated helper and validation tasks. For example, Jenkins can automatically run all tests and only promote the code to the production environment if the tests pass.</Text>
        </Document>
        <Document ID="4B013248-C6BF-4676-8572-DE4F752FF6A3">
            <Text>Learning Analytics
Look at Experience API (xAPI) at https://xapi.com
Do this after LMS and LTI because the LMS ought to provide analytics.</Text>
        </Document>
        <Document ID="9301E8B5-8823-46FB-8727-4C749483254B">
            <Text>Classes
	•	Prototype:  1
	•	Long term:  5</Text>
        </Document>
        <Document ID="0C9567B8-72E4-432E-9EC7-599579396B92">
            <Text>Styleguide for CSS/SCSS
Decision and further research to be done with UX Designer in October
AirBnB is a possible style guide for CSS and SASS https://github.com/airbnb/css
Requirements:
	•	Responsive
	•	Clean and simple. It’s easier to learn, develop and maintain.
	•	Good if CSS does not depend on Javascript (separation of concern)</Text>
        </Document>
        <Document ID="A89FAE7A-3BB4-4BF4-9531-C708E2AC6FCF">
            <Text>Python

Python Pros:
	•	Readable and dynamically-typed language
	•	High functionality
	•	Rich native library support
	•	Shorter code compared to similar object-oriented languages
	•	Fast development due to concise and simple syntax

Python Cons:
	•	Absence from Mobile Computing and Browsers
	•	Lack of Support for DSLs (Domain-specific Languages)
	•	Steep learning curve
	•	Runtime speed slow

Could be a choice for EdEHR yet it would introduce risk as the developer is not expert in this language.</Text>
            <Notes>“Pros of Python
1. Ease of Use
Python has a concise and expressive syntax that helps think more clearly when writing programs and makes it easier for others to maintain and enhance your applications. Also, being dynamically typed and flexible, Python allows writing a code that is less verbose but more modular and extensible. Python’s readability facilitates the coordination of teams working on large projects and helps concentrate on completing real tasks rather than scaffolding and tweaking your code base. Python is also quite easy to learn, which allows experienced developers to quickly jump into your Python projects and bring their experience in other programming languages to the table.

2. Fast Development
Thanks to clean, concise and simple syntax, developing in Python is much faster than in Java or C. Although it’s always difficult to provide an accurate assessment of the development speed, most experts agree that developing a Python application is about 5 to 10 times faster than developing the same application in Java. The time savings are even greater if compared to C and C++. The speed advantages substantially outweigh performance downsides of Python that originate from its interpreted nature and dynamic typing. Due to the language’s extremely stable architecture, the availability of web development frameworks (e.g Django) and third-party modules, applications developed in Python are no less reliable than those written in any other framework.

3. Rich Standard Library and Ecosystem
The rich standard/native library for server-side development is one of the main strengths of Python in comparison to Node.js. If you look at the standard library that comes with Javascript, it’s relatively minimal. To include the advanced functionality for the management of file system or memory in Node.js, you need to use Node package manager (npm), which leads to the extra work of selecting and checking the installed modules and packages. In Python, however, many useful functions come natively. For example, Python supports deleting a directory, creating temp files, argument parsing, unit testing, logging, printf format strings and many more by default. If Python’s standard library lacks the functionality you need, similarly to Node.js, Python has a developed ecosystem of modules to choose from.

Python Cons
1. Absence from Mobile Computing and Browsers
Python is supported on many server and desktop platforms but is not well-supported in mobile computing and browsers. This implies that developing a web application with Python will require at least two different languages in your stack. This can complicate interaction between the front-end and back-end teams and increase maintenance and debugging time and costs. Node.js, which uses Javascript for both front-end and back-end, is free from this limitation.

2. Lack of Support for DSLs (Domain-specific Languages)
Javascript allows developers to use transpiler tools like Babel and Domain-specific Languages (DSL) to experiment with and/or create a new syntax that optimises UI development and makes it faster. The Python community does not have an equivalent mechanism for experimenting with DSLs, which makes it more difficult to express UI code in Python compared to Javascript and Node.js.

Use Cases
Our brief overview demonstrates that neither Node nor Python is perfect. If so, how to make the right decision about which one to use? The answer is straightforward: both environments are good for different types of apps and tasks.

The event-driven architecture of Node.js, which allows multiple server requests and concurrent operations, is very good for chats and collaborative apps for video conferencing, document editing or drawing, collectively known as Real-Time Applications (RTAs). Node’s power in handling heavy I/O operations and shuffling of data between the front end and the back end also makes it a great choice for Single Page Applications (SPAs), which involve heavy client-side processing and rendering. Similarly, whenever performance and scalability of web applications are of concern, the lightweight and fast Node.js outperforms Python.

At the same time, you should opt for Python if you are building CPU-intensive applications. The thing is that Node’s single-threaded design is not suitable for CPU intensive operations with graphics and data. Making heavy computations in these types of tasks may simply block all incoming requests, leading to the slower performance of your web application.

Also, you should definitely choose Python when the speed of development is critical. With its rich standard library and modules available out of the box, Python is very powerful in Rapid Application Development (RAD). With Python, you don’t need to search for many utility modules and packages for your application. Instead, you can immediately proceed with the design of a fully functional prototype, which could be supplemented with other features later. Python’s simple and concise syntax makes writing code very fast too.

Finally, many experts cite Python’s expressiveness and ease of use, along with its vibrant community, as one of the main reasons to use the language in the Internet of Things projects. On top of that, Python is the language of choice for one of the most popular micro-controllers for IoT devices in the market, the Raspberry Pi. Since much of the training literature for IoT and Raspberry Pi is written in Python, it’s natural to use this language for IoT programming.

Summary
When choosing between Python and Node.js, you should definitely consider the speed of development, the need for scalability, and your application’s type. If your requirement is fast development of CPU-heavy applications or the development of IoT back-end, go for Python. Conversely, choose Node.js if you are thinking about RTAs, SPAs, and other I/O heavy solutions. Hopefully, this overview will help you make the right choice of your web development environment for the next project.”
https://www.netguru.co/blog/node.js-vs-python-comparison-which-solution-to-choose-for-your-next-project</Notes>
        </Document>
        <Document ID="161D31D5-5E50-4FE9-A201-80633B568008">
            <Text>Open Source Licensing : GNU Affero General Public License v3.0 </Text>
        </Document>
        <Document ID="A0AF072F-6C59-4B7F-8D4F-34956D64B103">
            <Title>Defect tracking</Title>
        </Document>
        <Document ID="D58AC719-D709-471F-BE19-1DF77E6D715A">
            <Text>Docker containerization
It’s desirable to containerize the application for ease of deployment and management but this task will be considered again after proof of concepts are complete.</Text>
        </Document>
        <Document ID="CE84A7B3-1144-4AFE-B158-4686EDFE3A6B">
            <Text>SCSS
Use SCSS rather than SASS because SCSS is a superset of CSS and all CSS content is valid SCSS. While CSS is not valid in SASS files.
http://sass-lang.com/
Strive to be DRY so use SCSS variables and mixins when possible</Text>
        </Document>
        <Document ID="4669BF01-0B71-4708-9B50-FF51D21A2023">
            <Title>CI CD</Title>
        </Document>
        <Document ID="7DB9F3A8-805C-4EC7-B735-65715CD6641D">
            <Text>Data storage: MongoDB
License: GNU Affero General Public License, version 3.
Doesn’t require a specialized database administrator.
High-performing for simple queries.
Scalable.
Flexible
Faster development time.
</Text>
        </Document>
        <Document ID="C355C73E-A065-476B-ADDB-31AA9A413BD5">
            <Text>CAS, SAML, OAuth</Text>
        </Document>
        <Document ID="86642B83-9EC9-4C3B-8B5A-025AEBE5A261">
            <Text>Summary based on assumptions
Per instance 
Prototype: 1 institution per instance (perhaps 4-6), 1 course, 1 class, 2-30 students
Long term:  1 institution, 20 courses (over 4 years and 5 fields of study),  up to 5 classes each, up to 50 students in each class.   This does not mean there are 20 x 5 x 50 = 5,000 students in total because the total number of students will be much less.  It may be more like 1,000 students enrolled   across those 20 courses.  

Thus, for example, the prototype needs to support 30 concurrent student users and long term the application may have up to a 1,000 concurrent users.</Text>
        </Document>
        <Document ID="78B37435-786C-4911-8D49-3D30111B0635">
            <Title>Continuous Integration and Deployment</Title>
        </Document>
        <Document ID="773BD659-E9C6-43EA-AD60-4D4E307AFC8F">
            <Title>Jenkins</Title>
            <Text>WIP</Text>
        </Document>
        <Document ID="71839B83-8F41-4D71-9A27-2674AB2493B0">
            <Text>Courses
	•	Prototype:   1 course
	•	Long term:  3 - 5 fields of study over 3 - 4 years ( 3 x 3 = 9, 5 x 4 = 20) up to 20 courses.</Text>
        </Document>
        <Document ID="9A53EBD5-DBD4-454E-A7B6-097EDC0EAA8F">
            <Text>Defect tracking: use github</Text>
        </Document>
        <Document ID="694FB096-3485-49FE-881F-C165986DB0F4">
            <Title>Deployment Environments</Title>
        </Document>
        <Document ID="64C1FCE0-493E-4DCB-9A4B-2D05BEC5C1C0">
            <Text>Idomatic.js
All code in any code-base should look like a single person typed it, no matter how many people contributed.
https://github.com/rwaldron/idiomatic.js

A useful snippet to consider.
Projects must include some form of unit, reference, implementation or functional testing. Use case demos DO NOT QUALIFY as "tests". The following is a list of test frameworks, none of which are endorsed more than the other.
	•	QUnit
	•	Jasmine
	•	Vows
	•	Mocha
	•	Hiro
	•	JsTestDriver
	•	Buster.js
	•	Sinon.js
	•	Tape</Text>
        </Document>
        <Document ID="B52ABCA0-8EE5-4078-A4C0-0D172AE13EDD">
            <Title>Composing ideas, concepts, overall, etc</Title>
        </Document>
        <Document ID="DBA03BA7-7BF5-4FBA-A486-D3BAFA3EC072">
            <Title>Technical Elements</Title>
        </Document>
        <Document ID="E8B4CD32-A43B-40CE-B25C-83D84FE6C095">
            <Text>CSS
Bulma CSS framework. It’s simple, 100% responsive, modern and open source. It doesn’t depend on javascript.
	•	https://bulma.io/
	•	https://bulma.io/documentation/overview/</Text>
        </Document>
        <Document ID="23D5FB00-42FC-463C-9F3F-221A463EEA55">
            <Title>Email system</Title>
            <Text>Email
Status: &lt;$label&gt;
To be considered after LTI and LMS research.  Perhaps the email function can be provided by the LMS
	•	Nodemail
	•	GoogleAPIs
	•	Flask-Mailer (Python)</Text>
        </Document>
        <Document ID="9D7FCB4D-D87A-452D-86E4-424E3D94B45B">
            <Text>Performance testing
Status: &lt;$label&gt;
By the way, if you were hoping I could point you to a generic industry standard for good and bad performance, you’re out of luck because no such guide exists. There have been various informal attempts to define a standard, particularly for browser-based applications.
https://sqa.stackexchange.com/questions/15296/performance-requirements-for-web-application

Here are two sources of information to consider later.

Open Source Load Testing Tools: Which One Should You Use?
https://www.blazemeter.com/blog/open-source-load-testing-tools-which-one-should-you-use

JMeter
https://jmeter.apache.org/usermanual/get-started.html</Text>
        </Document>
        <Document ID="0F57AD73-AC73-4652-9162-5D091FAE1A34">
            <Title>Server side code</Title>
        </Document>
        <Document ID="AB26FC4D-0BDB-423D-9C46-ABA70E6FB9B8">
            <Text>Requirements
	•	Support for Single Page Applications, Mobile Computing and Browsers (DSL support)
	•	Industry standard. 
	•	Suitable for prototyping. This is a huge project with a very short timeline. 
	•	Dynamically typed with option to add datatypes when working with the database. 
	•	Not verbose.  Language should favour clean and easy to read coding
	•	Large community of developers to support this project in the future.
	•	Modular (Separation of Concern).  Isolation of functionality is essential for stability. Once a component/module is ready and tested it should not be necessary to touch it again to adjust some other feature.
	•	Testable.
	•	Ideally use the same language for web, server and in between.
	•	What is the developer best at? The team developer is most familiar with Javascript (Node JS) and is interested in working more with Python.

The contenders are:  Python, Javascript (Node JS), PhP, Go, and Ruby.  This analysis will not look too deeply into Go or Ruby because the former is too new and Ruby’s popularity may be diminishing. https://getpocket.com/a/read/2153732617</Text>
            <Notes>Ruby on Rails provides an easy way to build server-side web applications.
“There's a fair amount of debate swirling about whether Ruby and Ruby on Rails are dying. Advocates of the framework, though, will enthusiastically argue that this is still one of the best web programming languages to build apps quickly. Folks have been predicting Ruby's demise for several years now, and while Ruby is not as popular as it once was, it is unlikely to disappear.
In fact, in March 2018, the Tiobe index, which tracks the popularity of programming languages, reported Ruby had returned to its top 10 list. If Ruby is back in vogue, Ruby on Rails skills are a valuable asset.” Source https://getpocket.com/a/read/2153732617</Notes>
        </Document>
        <Document ID="F534C7C5-7764-4CDA-93AB-B4E967EE59BB">
            <Text>MongoDB
WIP

Recommendation:  Use MongoDB with Mongoose for schema</Text>
        </Document>
        <Document ID="A91958BE-397A-4510-AD81-50180F897321">
            <Text>About the EdEHR project
BCcampus is leading the development of a new educational technology for the classroom in the Educational Electronic Health Record System Project (EdEHR). This project is funded by the Ministry of Advanced Education, Skills and Training and will build on existing research and development completed by an interest group from BCIT, Douglas College, UBC, and UVic.
In support of the requirement for health professional graduates to be competent in using electronic health records in an inter-professional setting, the goal of this project is to develop a solution that can be piloted and evaluated by interested institutions.
https://bccampus.ca/2018/01/23/bccampus-launches-the-educational-electronic-health-record-system-project-in-b-c/</Text>
        </Document>
        <Document ID="28F07C1E-6BF0-4850-930D-CF863A137963">
            <Title>Browser</Title>
        </Document>
        <Document ID="929F58B1-6B1C-4884-9CBB-0769EAAA0BFE">
            <Title>Web Standards</Title>
        </Document>
        <Document ID="9478A115-80AB-440C-BF3E-492342ACEC90">
            <Text>Development Server Hosting
The developer will use Digital Ocean to spin up servers for proof of concepts.
Later, it will be essential to transition to the BCcampus domain.</Text>
        </Document>
        <Document ID="FA4CC889-49F2-423E-B437-7AB213037F3D">
            <Title>Client side code</Title>
        </Document>
        <Document ID="BBAFCE46-9D94-48E5-84D9-DE73A7775D43">
            <Title>Interoperability</Title>
        </Document>
        <Document ID="375F2158-CE11-475F-9E04-31B1B57B1D4A">
            <Title>Media Attachments</Title>
            <Text>Media Attachments
Assuming this is not a core requirement for MVP. If  it is a core requirement then look into Kaltura for video content.  This is the tool used in ComPAIR. 
https://corp.kaltura.com/
Also see the BCCampus story about Kaltura
https://bccampus.ca/2013/05/23/wrangling-videos-in-one-location-just-got-a-lot-easier-with-kaltura/
</Text>
        </Document>
        <Document ID="F01A5EE2-FD43-47A2-992C-E958A3E70615">
            <Text>Production Server
At this time we lack a clear understanding of what performance and space requirements EdEHR has. So, the following specs are open to discussion and further research
Test environment
	•	2 - 4 GB RAM per core
	•	2 - 4 cores (to allow testing of application scaled to match production
	•	Standard hard drive, 10-20 GB free.
	•	Network connectivity.

Production
	•	4 Cores
	•	4 GB RAM per core.
	•	Standard hard drive, 50-100 GB free.
	•	Network connectivity.</Text>
        </Document>
        <Document ID="D5D2540C-82B2-467B-91AA-15346D922169">
            <Text>PhP

PhP is the industry standard having been around for over two decades. Yet it is known for its verbosity and difficulty to be modular.
PhP Pros:
	•	Rich code base
	•	Portable
	•	Designed to generate web pages
PhP Cons:
	•	Inefficient separation of concerns (modularity)
	•	Outdated client server model (not SPA)
	•	Different language than used on the client side.

Not the best choice for EdEHR</Text>
        </Document>
        <Document ID="A0989A04-3ABD-4A20-B9FB-A3C1ACC6EE15">
            <Title>Test Tools</Title>
        </Document>
        <Document ID="C06C330C-4101-4436-951B-5F5C28099553">
            <Text>BURP suite security testing</Text>
        </Document>
        <Document ID="5045E77E-6D90-4CBE-BDF2-D03E2B3F7309">
            <Title>Ruby</Title>
        </Document>
        <Document ID="CF6ADF73-4FC4-43EB-8FE7-C0DDF8A50B15">
            <Title>Testing Server Side</Title>
            <Text>Status: &lt;$label&gt;
Must implement automated testing for server side and ideally client side code.  This is expensive to do but invaluable in later stages of development.  Acknowledge that 100% coverage is not possible so testing, inherently, has trade-offs.  Testing the core functionality along with all edge cases that surfaced as defects should be considered core.  This at least provides confidence if at some later stage we need to refactor or adjust code that is new the core functionality.  

As defects arise try to first create a test script to replicate the defect.  TDD

BDD Behavior Driven Development is appropriate for the core functionality because it is directly connected with actual user behaviors (e.g. use cases) and is more comprehensive than a series of units tests (Test Drive Development).

BDD and TDD are the same, in that both require the developer to compose the test first. The test fails until the development is complete.

Testing is related to the topic of Automated Testing </Text>
        </Document>
        <Document ID="65B5D56C-5334-4CF0-B4D4-C74A07CAC093">
            <Title>Code Standards and Linting</Title>
            <Text>As every language, JavaScript has many code style guides.  Consider the following.</Text>
        </Document>
        <Document ID="61A0AAA4-4CBF-4094-9423-7D12FCB530C7">
            <Title>Testing Security</Title>
        </Document>
        <Document ID="856DA8F1-F8FC-496B-A21D-E5906C354E0E">
            <Text>Google Javascript Standard for ECMA 6th edition
https://google.github.io/styleguide/jsguide.html
“A JavaScript source file is described as being in Google Style if and only if it adheres to the rules herein”</Text>
        </Document>
        <Document ID="7508B6DD-B8BB-44B2-8733-D32B3A1ACF1A">
            <Text>Npm install
The system will be built to make installation as simple as:
```
git clone
npm install
npm start
```</Text>
        </Document>
        <Document ID="8E0F5DBF-FE36-47C4-9285-3D16C66C9B3A">
            <Title>Source Control</Title>
        </Document>
        <Document ID="B203E647-2EF2-4067-99DF-60A1DFBF3B68">
            <Text>Javascript ECMA 2016 or better. Use Babel to transpile if necessary.</Text>
        </Document>
        <Document ID="83645849-D53C-475D-A605-108ACBFB7D13">
            <Text>BC gov resource:
Status: &lt;$label&gt;

https://github.com/bcgov/BC-Policy-Framework-For-GitHub/tree/master/BC-Open-Source-Development-Employee-Guide
and specifically (with a couple of useful decision trees): 
https://github.com/bcgov/BC-Policy-Framework-For-GitHub/blob/master/BC-Open-Source-Development-Employee-Guide/Licenses.md 

The implications of the licenses of the tools we use in the product must be respected/compatible when making decisions on how to license the EdEHR.  Here's an example from the open text book project.

https://github.com/BCcampus/opentextbooks/blob/dev/README.md#copyright-and-license

Dave is researching the license issue.</Text>
        </Document>
        <Document ID="9AC35995-C32A-40D4-A026-A29445530793">
            <Text>Angular
https://en.wikipedia.org/wiki/Angular_(application_platform)
Angular is supported by Google and a large open source community. There are two main flavors: Angular and AngularJS.  The latter is the older version and is sometimes called Angular 1.x.  The former is the newer rewrite and for a time was called Angular 2.0.   There is no point considering AngularJS for a new project because Angular is far superior. That said, Angular is a framework suited to large projects with many team members because it provides a lot of features and supports the complexity in these types of projects.  
	•	Flexible: no
	•	Easy to learn: know to have a steep learning curve
	•	Documentation: yes
	•	Supports single page applications:  yes
	•	Code Style:  Complex
	•	Single File Components: no
	•	License: MIT
	•	Performance:  Reasonable
	•	Tooling:  Yes
	•	Routing (click to next ‘page’ in app with back button history): yes
	•	State management (track what stage of a process the user is at): yes
	•	Mobile:  Not sure.
	•	Community:  Large and well established
	•	Maturity:  Hard to say because Angular is such a radical change from AngularJS. No’ish
	•	Support:  Google
	•	Hiring Talent:  Yes
	•	Future:  not sure

https://medium.com/fundbox-engineering/react-vs-vue-vs-angular-163f1ae7be56
Angular grew to become a big framework that can be helpful in building complex systems but is less useful for building startup fast-changing UIs. React and Vue are more light-weight, and components are meant to be small, autonomous, encapsulated, hence — easily reusable. If we were to develop a new infrastructure from scratch (and not needing to migrate from an existing one), we could have been considering Angular too. In our case, it didn’t fit.
EdEHR recommendation: skip Angular</Text>
        </Document>
        <Document ID="170208F4-27FD-4B24-8653-7C5C493B9EC2">
            <Title>Document management, upload</Title>
            <Text>Status: &lt;$label&gt;
Multer to support multi-part document uploads
Seperately mounted disk for storage outside of application code space
</Text>
        </Document>
        <Document ID="E6E6F6A3-85AF-42E1-AAC9-BD94CDBFAB31">
            <Text>Linux based OS
Project is not dependent on any particular version of linux. Debian, Ubunto, etc are all fine.</Text>
        </Document>
        <Document ID="DFB170B9-D74E-455A-80D3-8E916AD4E912">
            <Text>Automation of common tasks
Gulp for misc tasks such as converting Scrivener outout to markdown or converting raw schema information to code.
Webpack for tasks such as Vue/SCSS to HTML/CSS/Javascript
Webpack. https://webpack.js.org/
</Text>
        </Document>
        <Document ID="DB22027D-9AFF-440C-89BC-EA13AD2664D1">
            <Text>React
React is supported by Facebook and has a large open source community.  It is definitely the most popular framework.
References: 
https://en.wikipedia.org/wiki/React_(JavaScript_library)
https://blog.techmagic.co/reactjs-vs-angular5-vs-vue-js-what-to-choose-in-2018/
https://medium.com/fundbox-engineering/react-vs-vue-vs-angular-163f1ae7be56

Companies that use ReactJS: Facebook, Instagram, Netflix, New York Times, Yahoo, Khan Academy, Whatsapp, Codecademy, Dropbox, Airbnb, Asana, Atlassian, Intercom, Microsoft.

EdEHR requirements:  (quotes from above sources in italics)
	•	Flexible: yes
	•	Easy to learn: easier than Angular yet takes a long time to master.  “React requires to (sic) learn a lot to become an expert. Would require much more time to train devs. Deliver slower (at least for the initial heavy lifting).”
	•	Documentation:  Lack of official documentation — super-fast development of ReactJS leaves no place for the proper documentation which is a bit chaotic now as many developers contribute it individually without any systematic approach;
	•	Supports single page applications: Yes
	•	Code Style:  Clean yet developers sometimes have too much choice; sometimes difficult to separate code between back end and front end
	•	Single File Components:  Yes, nicely
	•	License: MIT. (There is an interesting story to read about how Facebook released React with a series of different open source licenses that caused a lot of controversy. https://en.wikipedia.org/wiki/React_(JavaScript_library)#Licensing_controversy  Now, React is released under the very permissive MIT license.)
	•	Performance:  Yes
	•	Tooling:  Yes
	•	Routing: Needs plugin (which one to pick?)
	•	State management: not sure
	•	API: Yes
	•	Mobile:  Web and mobile apps can share some code.
	•	Community: Large yet fragmented
	•	Maturity:  Industry standard.
	•	Support: Yes
	•	Hiring Talent: Yes
	•	Future:  Facebook provides  “codemods” to automate much of the upgrade process. </Text>
        </Document>
        <Document ID="AB6760D2-0EC8-412B-8B9F-0F20DF24F8ED">
            <Title>Server Tooling</Title>
        </Document>
        <Document ID="FB1F184F-5027-47D9-8250-6F687B0CC87E">
            <Title>Hosting</Title>
        </Document>
        <Document ID="DF643E0B-3E63-458D-945D-C0CF3EC8B1F9">
            <Title>Docker</Title>
            <Text>WIP</Text>
        </Document>
        <Document ID="E011E7FC-6654-4068-AB57-9430CB58B762">
            <Text>LTI
Learning Tools Interoperability (LTI) is a standard created by the IMS Global Learning Consortium that links content and resources to learning platforms.  Its primary purpose is to connect learning systems such as a learning management system (LMS) with external service tools in a standard way across learning systems. The standard describes the connecting system as an LTI Tool Consumer and the connected tool as an LTI Tool Provider.
With LTI we hope that our MVP prototype can use any LMS  (e.g. Canvas or Moodle) to provide the system for managing students, instructors, classes and etc.  The LMS will be configured to communicate with our EdEHR through LTI v1.2 protocol.  Essentially, this protocol provides a means for the LMS user to access special portions of the EdEHR.  For example, students can be presented with a set of links to assignments or instructors can have a set of links to courses.
</Text>
        </Document>
        <Document ID="964C33D3-C32F-49C9-A275-38612CC4F8C2">
            <Text>JavaScript Standard Style Guide. https://github.com/standard/standard</Text>
        </Document>
        <Document ID="3BF8F5FE-902D-4401-88A4-57132EF56B3C">
            <Title>Testing UI</Title>
            <Text>Status: &lt;$label&gt;</Text>
        </Document>
        <Document ID="C42A7C98-5145-41AE-BAF6-8450B76FAAD5">
            <Text>Use Javascript ECMA 2016 or better with NodeJs</Text>
            <Notes>Javascript allows developers to use transpiler tools like Babel and Domain-specific Languages (DSL) to experiment with and/or create a new syntax that optimises UI development and makes it faster. The Python community does not have an equivalent mechanism for experimenting with DSLs, which makes it more difficult to express UI code in Python compared to Javascript and Node.js.
</Notes>
        </Document>
    </Documents>
</SearchIndexes>