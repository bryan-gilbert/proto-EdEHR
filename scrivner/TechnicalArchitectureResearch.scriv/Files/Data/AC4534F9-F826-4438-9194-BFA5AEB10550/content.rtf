{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf600
{\fonttbl\f0\froman\fcharset0 Palatino-Roman;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0\b\fs26 \cf0 Server side generation for client side
\b0 \
This section pertains to the code written for the client side (the UI).  For example, if the pages are generated on the server (e.g. PhP) or transpiled into static web resources (React, Vue, etc). Simply put:  choose between server side generation or static resources with web services. \
The current trend in the industry to away from server side generation.  It is still the dominate form of delivery because of the popularity and longevity of PhP yet new projects are opting to go the static resource direction.  One reason for this direction is it promotes a clear division between what is served to the UI and what services the server provides (which are being reduced to small, lean and efficient micro-services that are targeted to a single task such as fetching data or updating the database). Browsers are also more efficient at caching static resources and this makes the web applications more responsive. Another term for this approach is Single Page Applications (SPA).\
For these reasons and many more it is recommended that EdEHR uses static resources and web services.
\b \
Recommendation
\b0 : choose a framework such as React, Angular, Vue or \'85 (all of which are open source) and skip PhP.\

\b EdEHR Requirements:\
\pard\tx220\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\li720\fi-720\sl264\slmult1\pardirnatural\partightenfactor0
\ls1\ilvl0
\b0 \cf2 {\listtext	\uc0\u8226 	}Flexible and easy to adapt (to suit project timeline)\
{\listtext	\uc0\u8226 	}Easy to learn (to suit project timeline and attract long term development)\
{\listtext	\uc0\u8226 	}Documentation: clear, available, consistent\
{\listtext	\uc0\u8226 	}Supports single page applications.\
{\listtext	\uc0\u8226 	}Code Style:  How readable and intuitive is the code and conventions of the framework?\
{\listtext	\uc0\u8226 	}Single File Components: How intuitive is maintaining a component in the framework?\
{\listtext	\uc0\u8226 	}License: open\
{\listtext	\uc0\u8226 	}Performance:  How performant are apps built with the framework?\
{\listtext	\uc0\u8226 	}Tooling: What tools and stable plugins are available for the framework?\
{\listtext	\uc0\u8226 	}Routing (click to next \'91page\'92 in app with back button history)\
{\listtext	\uc0\u8226 	}State management (track what stage of a process the user is at)\
{\listtext	\uc0\u8226 	}API calls to server\
{\listtext	\uc0\u8226 	}Mobile:  Does it offer a way to build native mobile applications?\
{\listtext	\uc0\u8226 	}Community: What is the size of the community and is it united or fragmented?\
{\listtext	\uc0\u8226 	}Maturity: How mature is the framework? Is it production-tested?\
{\listtext	\uc0\u8226 	}Support: How big is the team behind the framework?\
{\listtext	\uc0\u8226 	}Hiring Talent: How easy would it be to hire developers with prior experience in the framework?\
{\listtext	\uc0\u8226 	}Future: how are updates handled?}