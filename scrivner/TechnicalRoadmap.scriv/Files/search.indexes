<?xml version="1.0" encoding="UTF-8"?>
<SearchIndexes Version="1.0">
    <Documents>
        <Document ID="12363E44-3C1A-4D1E-9902-EF3BDA7046AE">
            <Title>Requirements</Title>
            <Text>The EdEHR project charter requires ‘Open Source’.


</Text>
        </Document>
        <Document ID="BE3B1503-3BD5-40C2-91C4-FD806C2815CE">
            <Text>Google Analytics
Status: &lt;$label&gt;
Oh hold pending answers around privacy policies.</Text>
        </Document>
        <Document ID="90CF32B3-26F5-4D1D-A7FB-5811CE4C17E4">
            <Text>AirBnB Style Guide

Perhaps the most popular style guide is https://github.com/airbnb/javascript

A mostly reasonable approach to JavaScript

Note: this guide assumes you are using Babel, and requires that you use babel-preset-airbnb or the equivalent. It also assumes you are installing shims/polyfills in your app, with airbnb-browser-shims or the equivalent.</Text>
        </Document>
        <Document ID="5A300147-08A8-40DC-9910-2CDCDBC79B55">
            <Text>Scrivener

Scrivener is a tool that allows one to describe the forest and fly into the forest and visit a few trees and dive in further and visit a branch of a tree and go further and visit the bugs on the leaf of a branch of a tree in the forest and then quickly move back out to see the big picture again.

Recommendation: Use Scrivener as the main organizing tool because it is great for composing technical specifications and technical roadmap.  Scrivener is also the best place to manage the complex backlog of tasks allowing grouping, nesting, filtering and more.  Periodically, export a complete version of the overall project backlog with all the details. 

http://www.literatureandlatte.com/forum/viewtopic.php?t=50214

As key tasks and immediate tasks emerge move them to Trello</Text>
        </Document>
        <Document ID="F2BFCFDD-4F2A-4213-8794-007A622186DD">
            <Text>Institutions
Status: &lt;$label&gt;
The MVP needs to support four institutions with a possibility of adding in two more.  

How many institutions in total will a single instance need to support?
What is the long term goals?  For example would each institution have run their own instance of the application.  Or is there to be one instance for the world.

Recommendation:  The application should be simple enough to be hosted at each individual institution.

This simplifies issues around privacy and it simplifies the performance requirements and database schema and more.  Accepting this recommendation will remove some project risk. 

Assumptions
	•	Prototype: 1 institution per instance
	•	Long term:  ditto</Text>
        </Document>
        <Document ID="228B0702-2654-4151-9B55-13F2C410F000">
            <Title>Authorization</Title>
            <Text>Authorization
Status: &lt;$label&gt;
Depends on LMS and LTI research</Text>
        </Document>
        <Document ID="CB6AAAC6-1EA3-4685-B118-998F28DFE7CF">
            <Text>Students
Status: &lt;$label&gt;
How may students are typically in a class?

Assumptions
*  Prototype: 20 - 30 students per class
*  Long term: up to 50 students per class</Text>
        </Document>
        <Document ID="19CC4AD1-7880-4909-847B-31F9B2FCAB36">
            <Title>EdEHR</Title>
            <Text>EdEHR will use Javascript Standard because it’s simple, automatice and just works.  End of debate means we can get coding ;-)
That said we may cherry pick guidelines from the other style guides as we go.    (http://jstherightway.org)</Text>
        </Document>
        <Document ID="2C86AB3F-DA5F-4F05-B7FA-C3F879B069AF">
            <Text>Trello

Trello.com is good at capturing ideas but it doesn’t help to structure the big, medium and small picture. In Trello everything is the same: a card. It can be augmented with a colour or label and with several mouse clicks it is possible to filter, yet it doesn’t help to quickly organize a very large conceptual framework and move around to explore nuances and details while retaining the big picture.

Recommendation: Use Trello as a team communication tool. 

Put all main high level tasks in Trello as placeholders for future work. Keep these simple as they just illustrate the big picture. 

Put all immediate tasks in Trello.  These are small achievable tasks that are planned for the next sprint or two or are actually in progress.  This keeps the Trello board focused on sharing with the team what are current activities and near term plans.</Text>
        </Document>
        <Document ID="DF0B2F1F-A33D-4FFC-93DA-4CDD081AACC9">
            <Title>Requirements Tooling</Title>
        </Document>
        <Document ID="0686D02E-87CF-4DA8-B343-9CC0E3FFEF51">
            <Text>Recommendation

Resources
*  https://medium.com/@TechMagic/reactjs-vs-angular5-vs-vue-js-what-to-choose-in-2018-b91e028fa91d
*  https://expertise.jetruby.com/react-vs-vue-js-which-front-end-framework-to-choose-in-2018-2a62a1fe76f9

Advantages of Vue.JS:
*  Flexibility, Simplicity, Fast rendering and small size.
*  Soup to nuts framework
*  Easier to learn and get started

Advantages of React:
*  Perfectly fits scalable apps, easier to test and maintain;
*  Can be used for native and web apps;
*  Huge ecosystem;
*  A big set of tools.

Common Advantages
*  Fast rendering with Virtual DOM;
*  Small size;
*  Reactive components;
*  The ability to easily integrate with routers, collectors, and state managers;
*  A-class maintenance.

Quote: 

From my perspective, there are two factors driving Vue’s growth.  First, lots of developers still want a “soup to nuts” framework, i.e. one that does everything from routing to templating to back-end data fetching. Vue does this, which tends to make it easier for a first-time developer to pick up since they just make one choice: use Vue, and all the other choices are made for them.

React, on the other hand, requires making lots of additional choices about routing and data management libraries, which makes it more intimidating and slower to get started with. So Angular, Ember and Vue all have this “all-inclusive” advantage over React.

Second, if you’ve decided you want an all-inclusive framework, Vue performs better in benchmarks and is relatively easier to learn. Although these things are subjective, devs often report that it feels “cleaner” or “simpler” than older frameworks like Angular and Ember.

Laurie Voss, co-founder and COO of npm

Summary for EdEHR
*  Flexible: either
*  Easy to learn: Vue over React
*  Documentation: Vue
*  Code Style:  Either
*  Single File Components:  Slight edge to Vue
*  License: Both are MIT
*  Performance:  Either
*  Tooling:  Edge to React yet Vue has essentials built in making it easier to get started
*  Routing: built into Vue
*  State management: built into Vue
*  API: Either
*  Mobile:  React
*  Community:  React yet it is fragmented. Vue is smaller and more cohesive and therefore consitent (read less ambiguity about how to do something. Less time trying out varoius options and then deciding and then developing.)
*  Maturity:  React has edge
*  Support: React community is larger yet support for either is available
*  Hiring Talent:  React has edge, for now.

For a new project with no legacy and a developer team that has equal experience with both frameworks (read experienced newbie) it’s a good time to be taking the new lean simple fast approach: vue.js.

</Text>
        </Document>
        <Document ID="CABEE388-B4E8-48F3-8944-6A225F3485F0">
            <Title>Task runners</Title>
            <Text>During development it is optimal to automate serval tasks. Including:
SASS to CSS
CSS to minified CSS for optimal page loading and caching
Javascript to minified JS for optimal page loading and caching
Transpiling React or Vue into HTML, CSS, JS
Etc

There are three main contenders: Grunt, Gulp and WebPack.   EdEHR will use WebPack because it provides a superset of the features in Grunt and Gulp; it’s configuration is reasonable; it provides a “hot” deploy (meaning a change in code is immediately sent to the browser for viewing which speeds up development)

Webpack. https://webpack.js.org/
Webpack is an open-source JavaScript module bundler. Its main purpose is to bundle JavaScript files for usage in a browser, yet it is also capable of transforming, bundling, or packaging just about any resource or asset. Webpack takes modules with dependencies and generates static assets representing those modules. https://en.wikipedia.org/wiki/Webpack</Text>
        </Document>
        <Document ID="8601F6DD-425B-4D78-82AE-2E8B338660A4">
            <Title>Analytics</Title>
        </Document>
        <Document ID="001EE362-534C-4121-997B-6646C3283490">
            <Text>Vue

Vue.js is a JavaScript framework, launched in 2013, which perfectly fits for creating highly adaptable user interfaces and sophisticated Single-page applications.

Resources
*  https://medium.com/@TechMagic/reactjs-vs-angular5-vs-vue-js-what-to-choose-in-2018-b91e028fa91d
*  https://vuejs.org/v2/guide/comparison.html
*  https://medium.com/fundbox-engineering/react-vs-vue-vs-angular-163f1ae7be56

Companies that use Vue.js: Xiaomi, Alibaba, WizzAir, EuroNews, Grammarly, Gitlab and Laracasts, Adobe, Behance, Codeship, Reuters.

EdEHR requirements:  (quotes from above sources in italics)
*  Flexible:  Yes
*  Easy to learn: Yes fast ramp up
*  Documentation:  Detailed documentation. Vue.js has very circumstantial documentation which can fasten learning curve for developers and save a lot of time to develop an app using only the basic knowledge of HTML and JavaScript.  Yet another source says:  Lack of full English documentation. This leads to a partial complexity on some stages of development, nevertheless, more and more materials are being translated into English.
*  Supports single page applications.
*  Code Style: 
*  Single File Components:  Vue.js can be used for both building single-page applications and more difficult web interfaces of apps. The main thing is that smaller interactive parts can be easily integrated into the existing infrastructure with no negative effect on the entire system.
*  License: open
*  Performance:  Tiny size. Vue.js can weight around 20KB keeping its speed and flexibility that allows reaching much better performance in comparison to other frameworks.
*  Tooling: Awesome integration.  Another source says:  Fewer plugins and tools available, smaller community.
*  Routing: Vue’s core modules (Vuex, Router, etc.) are built-in and work fantastic.
*  State management: yes
*  API: yes
*  Mobile:  Vue Native and Capacitor are solutions to produce mobile targeted apps
*  Community:  Growing
*  Maturity: Vue.js still has a pretty small market share in comparison with React or Angular, which means that knowledge sharing in this framework is still in the beginning phase.
*  Support: Smaller 
*  Hiring Talent:  growing but not easy at this time
*  Future: how are updates handled?

*  Large scaling. Vue.js can help to develop pretty large reusable templates that can be made with no extra time allocated for that according to its simple structure.
*  Better promotes Full-Stack culture; allows cross-product development.
*  Not being React, devs don’t gain experience with the most popular framework today.</Text>
        </Document>
        <Document ID="967EC040-E259-4A73-BBA2-27A17FF72E9B">
            <Title>Introduction</Title>
            <Text>From a high level view the app has three layers: 
1. Learning Management System 
2. Assignment management system
3. Electronic Health Record system</Text>
        </Document>
        <Document ID="BDBE694C-16EA-426E-BBCC-1173D6790193">
            <Text>Requirements for EdEHR databases
WIP
*  Flexible: because this is a rapid development prototype project it is essential that we can easily augment and change the schema without spending a lot of time on writing transformation scripts or working with transformation tooling. 
*  Strongly typed and validation support to ensure the data in the database is valid.
*  Rapidly convert data to and from code. (Transfer of data to and from the “objects” used in software.)
*  Store data in easy for humans to understand format.
*  Scalable
*  Community Support
*  Open Source</Text>
        </Document>
        <Document ID="80D62A7D-E8B8-4206-B65F-ACA8E3BFE1D7">
            <Text>Git Github

EdEHR will use Git and Github because it is the industry standard and fits the project charter requirement to be open source.

I have started a repro here: https://github.com/bryan-gilbert/proto-EdEHR

Branching

To begin all rough preliminary work will be submitted to the main branch.  Yet, once development is underway all submissions will be made to a development branch.  Testing and stylistic checks will be completed before promotion to the master branch.  Changes on the master branch will be monitored by an instance of Jenkins which will start a build process on a Test server.  The developer’s goal is to not break the build. </Text>
        </Document>
        <Document ID="67B8D1A3-ED68-480D-8F64-21AE374E5EBB">
            <Text>Requirements

Agile planning needs to capture “stuff to do” in a place that can “backlog” or “park” the task until it is time to work on the task.  

Before a task can be started it must be the “right size”. Normally, this means it is a task that can be accomplished in a timeframe that is short enough that the doer doesn’t get distracted. I.e. a time period of a ‘day’ is big. Perhaps two or three days but not more. Ideally, it’s a task that can be DONE in a few hours.

The project contains many big tasks that need to be decomposed into smaller, achievable and understandable tasks.  This break down does happens just in time for the work to begin.

The project planning tool needs to allow the composition and ordering of both “big items” and the smaller items; quickly and efficiently.  The tool needs to let the user get everything written down quickly so they can save the thought (park it or back log it) until the time is right to work.  And then get back to work.</Text>
        </Document>
        <Document ID="7068A1C6-0766-47D6-B1B8-D12EC79E76BA">
            <Title>Application Requirements</Title>
            <Text>The following contains assumptions that need to be verified by the team.</Text>
        </Document>
        <Document ID="59E8F8E7-CE7A-4D70-898C-CACD04D1C01B">
            <Title>Testing</Title>
            <Text>Look to work out the requirements of the testing system after some other questions that have project risk are answered.  In other words, let’s get some answers to those risky issues and then come back to stuff that is relatively straight forward, although important</Text>
        </Document>
        <Document ID="984D6705-2647-417B-90E0-D6723A65C663">
            <Text>Relational vs non-relational databases (RDMS  vs NoSQL)
WIP
Before deciding on which database system to use (MySQL, MariaDB, PostgreSQL, MongoDB) we ought to select the type of database system to use.  As you will see, the clear answer for EdEHR is to select MongoDB with Mongoose.

Relational SQL databases (RDMS) store data in tables (like a spreadsheet) and the relationships are made by storing a piece of data in one table to say ‘go look in row X of this other table’.  RDMS are the dominant database system, for sure.  They are the better option for applications that require multi-row transactions - such as an accounting system - or for legacy systems that were built for a relational structure. 

Non-relational databases (NoSQL), like MongoDB, are better for prototyping and rapid development because they organize data into JSON documents. JSON is a format that is easy for humans to read and easy for machines to use.  JSON documents are flexible, unlike a RDMSwhere the table columns are fixed in size and type.  With MongoDB and JSON new fields can be added at any time so it can store unstructured data such as user logs, real-time analytics, content management systems, sessions, images, videos, chats and also data from IoT devices.

It is possible to add structure (schema) to a MongoDB system by using a layer like Mongoose. Yet during early development it’s good to take advantage of the dynamic schema because it gives you flexibility to change your data schema without modifying any of your existing data.

MongoDB License: GNU Affero General Public License, version 3.

Manageability: MongoDB doesn’t require a specialized database administrator. Since it is fairly user-friendly in this way, it can be used by both developers and administrators.

Speed: It’s high-performing for simple queries.

Scalability: It is difficult to increase the size of a RDMS because of the table structure. It’s just plain hard to split the table across many servers.  NoSQL databases are easily split so they are the preferred choice for large or every changing data sets.

Flexibility- Firstly, the document structure is more in line with how developers code in their respective programming languages which is clear and structured in key-value pairs. This makes it easier to add and edit data/documents at any time. In a relational database, this would involve the database having to be restructured

Supports a wide range of queries – fields, expressions, range queries, JavaScript functions and more

Faster turnaround time-because related data which would be stored across several tables in a MySQL database are stored in the same document in a MongoDB

No strict schemas followed-you are allowed to create a document first before defining the structure of the document, making it very helpful for businesses who in a start-up phase who are unsure of what their database structure should look like

Like we mentioned, MongoDB’s features make it better suited to those who handle huge volumes of data

Many today consider RDMS to be unable to meet the expectations from today’s data-intensive applications.  https://blog.resellerclub.com/mongodb-vs-mysql-comparison/
</Text>
        </Document>
        <Document ID="52004D3F-FA73-42E3-93BF-E9522DC312DC">
            <Text>Old Browsers and project risk
Status: &lt;$label&gt;
If support for non-modern browsers is required then this will introduce significant risks both in terms of the ability to test them and significant risk in development time.  Stakeholders need to know that a decisionm to support non-modern browsers means other features are at risk of not being “done”.  It is a strong recomendation to exclude non-modern browsers from the MVP.

Here is a general description of what a modern browser:
https://stackoverflow.com/questions/50829693/what-is-a-modern-browser

We might include a feature to warn users if they have an outdated browser.
https://www.npmjs.com/package/outdated-browser-rework

Here are the suggested default minimum versions as used by the above plugin. Note that IE is not included.
	•	Chrome: 57, // Includes Chrome for mobile devices
	•	Edge: 39,
	•	Safari: 10,
	•	Mobile Safari: 10,
	•	Firefox: 50,
	•	Opera: 50,
	•	Vivaldi: 1,
	•	IE: false
	•	// You could specify a version here if you still support IE in 2017.
	•	// You could also instead seriously consider what youre doing with your time and budget
</Text>
        </Document>
        <Document ID="4B013248-C6BF-4676-8572-DE4F752FF6A3">
            <Text>Learning Analytics
Status: &lt;$label&gt;
Look at Experience API (xAPI) at https://xapi.com
Do this after LMS and LTI because the LMS ought to provide analytics.

</Text>
        </Document>
        <Document ID="A89FAE7A-3BB4-4BF4-9531-C708E2AC6FCF">
            <Text>Python

Python Pros:
*  Readable and dynamically-typed language
*  High functionality
*  Rich native library support
*  Shorter code compared to similar object-oriented languages
*  Fast development due to concise and simple syntax

Python Cons:
*  Absence from Mobile Computing and Browsers
*  Lack of Support for DSLs (Domain-specific Languages)
*  Steep learning curve
*  Runtime speed slow

Could be a choice for EdEHR yet it would introduce risk as the developer is not expert in this language.</Text>
            <Notes>“Pros of Python
1. Ease of Use
Python has a concise and expressive syntax that helps think more clearly when writing programs and makes it easier for others to maintain and enhance your applications. Also, being dynamically typed and flexible, Python allows writing a code that is less verbose but more modular and extensible. Python’s readability facilitates the coordination of teams working on large projects and helps concentrate on completing real tasks rather than scaffolding and tweaking your code base. Python is also quite easy to learn, which allows experienced developers to quickly jump into your Python projects and bring their experience in other programming languages to the table.

2. Fast Development
Thanks to clean, concise and simple syntax, developing in Python is much faster than in Java or C. Although it’s always difficult to provide an accurate assessment of the development speed, most experts agree that developing a Python application is about 5 to 10 times faster than developing the same application in Java. The time savings are even greater if compared to C and C++. The speed advantages substantially outweigh performance downsides of Python that originate from its interpreted nature and dynamic typing. Due to the language’s extremely stable architecture, the availability of web development frameworks (e.g Django) and third-party modules, applications developed in Python are no less reliable than those written in any other framework.

3. Rich Standard Library and Ecosystem
The rich standard/native library for server-side development is one of the main strengths of Python in comparison to Node.js. If you look at the standard library that comes with Javascript, it’s relatively minimal. To include the advanced functionality for the management of file system or memory in Node.js, you need to use Node package manager (npm), which leads to the extra work of selecting and checking the installed modules and packages. In Python, however, many useful functions come natively. For example, Python supports deleting a directory, creating temp files, argument parsing, unit testing, logging, printf format strings and many more by default. If Python’s standard library lacks the functionality you need, similarly to Node.js, Python has a developed ecosystem of modules to choose from.

Python Cons
1. Absence from Mobile Computing and Browsers
Python is supported on many server and desktop platforms but is not well-supported in mobile computing and browsers. This implies that developing a web application with Python will require at least two different languages in your stack. This can complicate interaction between the front-end and back-end teams and increase maintenance and debugging time and costs. Node.js, which uses Javascript for both front-end and back-end, is free from this limitation.

2. Lack of Support for DSLs (Domain-specific Languages)
Javascript allows developers to use transpiler tools like Babel and Domain-specific Languages (DSL) to experiment with and/or create a new syntax that optimises UI development and makes it faster. The Python community does not have an equivalent mechanism for experimenting with DSLs, which makes it more difficult to express UI code in Python compared to Javascript and Node.js.

Use Cases
Our brief overview demonstrates that neither Node nor Python is perfect. If so, how to make the right decision about which one to use? The answer is straightforward: both environments are good for different types of apps and tasks.

The event-driven architecture of Node.js, which allows multiple server requests and concurrent operations, is very good for chats and collaborative apps for video conferencing, document editing or drawing, collectively known as Real-Time Applications (RTAs). Node’s power in handling heavy I/O operations and shuffling of data between the front end and the back end also makes it a great choice for Single Page Applications (SPAs), which involve heavy client-side processing and rendering. Similarly, whenever performance and scalability of web applications are of concern, the lightweight and fast Node.js outperforms Python.

At the same time, you should opt for Python if you are building CPU-intensive applications. The thing is that Node’s single-threaded design is not suitable for CPU intensive operations with graphics and data. Making heavy computations in these types of tasks may simply block all incoming requests, leading to the slower performance of your web application.

Also, you should definitely choose Python when the speed of development is critical. With its rich standard library and modules available out of the box, Python is very powerful in Rapid Application Development (RAD). With Python, you don’t need to search for many utility modules and packages for your application. Instead, you can immediately proceed with the design of a fully functional prototype, which could be supplemented with other features later. Python’s simple and concise syntax makes writing code very fast too.

Finally, many experts cite Python’s expressiveness and ease of use, along with its vibrant community, as one of the main reasons to use the language in the Internet of Things projects. On top of that, Python is the language of choice for one of the most popular micro-controllers for IoT devices in the market, the Raspberry Pi. Since much of the training literature for IoT and Raspberry Pi is written in Python, it’s natural to use this language for IoT programming.

Summary
When choosing between Python and Node.js, you should definitely consider the speed of development, the need for scalability, and your application’s type. If your requirement is fast development of CPU-heavy applications or the development of IoT back-end, go for Python. Conversely, choose Node.js if you are thinking about RTAs, SPAs, and other I/O heavy solutions. Hopefully, this overview will help you make the right choice of your web development environment for the next project.”
https://www.netguru.co/blog/node.js-vs-python-comparison-which-solution-to-choose-for-your-next-project</Notes>
        </Document>
        <Document ID="9301E8B5-8823-46FB-8727-4C749483254B">
            <Text>Classes
Status: &lt;$label&gt;
Within a course how many classes might there be? 

Assumptions 
*  Prototype:  1
*  Long term:  5</Text>
        </Document>
        <Document ID="0C9567B8-72E4-432E-9EC7-599579396B92">
            <Text>Styleguide for CSS SASS
October
Decision and further research to be done with UX Designer in October

AirBnB is a possible style guide for CSS and SASS https://github.com/airbnb/css
Requirements:
	•	Responsive
	•	Clean and simple. It’s easier to learn, develop and maintain.
	•	Good if CSS does not depend on Javascript (separation of concern)</Text>
        </Document>
        <Document ID="A13CA5F9-7D9A-4C7C-883C-683D08223B4F">
            <Text>Jenkins
October
Jenkins is a tool for automating a series of steps to take code from the development environment and place it into the production environment. Along the way Jenkins can run automated helper and validation tasks. For example, Jenkins can automatically run all tests and only promote the code to the production environment if the tests pass.

We’ll delay further investigation into the needs around Jenkins until mid-October.</Text>
        </Document>
        <Document ID="161D31D5-5E50-4FE9-A201-80633B568008">
            <Text>Open Source Licensing
Status: &lt;$label&gt;
Open Source is a primary requirement for every aspect of this project

From https://opensource.org/licenses 
The following OSI-approved licenses are popular, widely used, or have strong communities:
*  Apache License 2.0
*  BSD 3-Clause "New" or "Revised" license
*  BSD 2-Clause "Simplified" or "FreeBSD" license
*  GNU General Public License (GPL)
*  GNU Library or "Lesser" General Public License (LGPL)
*  MIT license
*  Mozilla Public License 2.0
*  Common Development and Distribution License
*  Eclipse Public License

https://en.wikipedia.org/wiki/Comparison_of_free_and_open-source_software_licenses

GNU General Public License Version 3, 29 June 2007. (GNU GPLv3)

https://choosealicense.com/licenses/gpl-3.0/

GNU Affero General Public License v3.0

https://choosealicense.com/licenses/agpl-3.0/

The GNU Affero General Public License is a modified version of the ordinary GNU GPL version 3. It has one added requirement: if you run a modified program on a server and let other users communicate with it there, your server must also allow them to download the source code corresponding to the modified version running there.
https://www.gnu.org/licenses/why-affero-gpl.html

Recommendation

The GNU Affero seems to fit the intention of BCCampas’s mandate to provide open source educational tools and promote the development of more open source tools.  
*  https://bccampus.ca/2018/05/08/copyright-and-open-licences-an-excerpt-from-the-bccampus-open-education-self-publishing-guide/
*  https://bccampus.ca/2013/04/02/walking-the-talk-open-resources-at-rru/

Recommendation: GNU Affero General Public License v3.0</Text>
        </Document>
        <Document ID="A0AF072F-6C59-4B7F-8D4F-34956D64B103">
            <Title>Defect tracking</Title>
            <Text>Requirements

Defect tracking tool needs to allow the team to add, edit, comment, and resolve issues as the prototype evolves and for when it is in place.  The tool ought to be suitable for non-technical users to resolve issues.

We can look into JIRA or to keep it simple let’s just use the issue tracking in github.

Recommendation: Github</Text>
        </Document>
        <Document ID="D58AC719-D709-471F-BE19-1DF77E6D715A">
            <Text>Docker containerization
October
ToDo: describe the benefits and reasons for considering Docker

For the immediate term:  postpone further work on Docker because it can be considered later in the project timeline.  It’s main benefit is to allow for the application to be scalled up when needed.  As we are building a prototype it is not essential to be ready to scale. </Text>
        </Document>
        <Document ID="AC4534F9-F826-4438-9194-BFA5AEB10550">
            <Text>Server side generation for client side

This section pertains to the code written for the client side (the UI).  For example, if the pages are generated on the server (e.g. PhP) or transpiled into static web resources (React, Vue, etc). Simply put:  choose between server side generation or static resources with web services. 

The current trend in the industry to away from server side generation.  It is still the dominate form of delivery because of the popularity and longevity of PhP yet new projects are opting to go the static resource direction.  One reason for this direction is it promotes a clear division between what is served to the UI and what services the server provides (which are being reduced to small, lean and efficient micro-services that are targeted to a single task such as fetching data or updating the database). Browsers are also more efficient at caching static resources and this makes the web applications more responsive. Another term for this approach is Single Page Applications (SPA).

For these reasons and many more it is recommended that EdEHR uses static resources and web services.

Recommendation: choose a framework such as React, Angular, Vue or … (all of which are open source) and skip PhP.

EdEHR Requirements:
*  Flexible and easy to adapt (to suit project timeline)
*  Easy to learn (to suit project timeline and attract long term development)
*  Documentation: clear, available, consistent
*  Supports single page applications.
*  Code Style:  How readable and intuitive is the code and conventions of the framework?
*  Single File Components: How intuitive is maintaining a component in the framework?
*  License: open
*  Performance:  How performant are apps built with the framework?
*  Tooling: What tools and stable plugins are available for the framework?
*  Routing (click to next ‘page’ in app with back button history)
*  State management (track what stage of a process the user is at)
*  API calls to server
*  Mobile:  Does it offer a way to build native mobile applications?
*  Community: What is the size of the community and is it united or fragmented?
*  Maturity: How mature is the framework? Is it production-tested?
*  Support: How big is the team behind the framework?
*  Hiring Talent: How easy would it be to hire developers with prior experience in the framework?
*  Future: how are updates handled?</Text>
        </Document>
        <Document ID="4669BF01-0B71-4708-9B50-FF51D21A2023">
            <Title>CI CD</Title>
            <Text>Look to work out the requirements of the CI CD system after some other questions that have project risk are answered.  In other words, let’s get some answers to those risky issues and then come back to stuff that is relatively straight forward, although important

Continuous Integration: automated testing as part of the development lifecycle

Continuous Delivery: incrementally add value on a continuous basis.</Text>
        </Document>
        <Document ID="C355C73E-A065-476B-ADDB-31AA9A413BD5">
            <Text>CAS, SAML, OAuth</Text>
        </Document>
        <Document ID="86642B83-9EC9-4C3B-8B5A-025AEBE5A261">
            <Text>Summary based on assumptions
Status: &lt;$label&gt;
Per instance 
*  Prototype: 1 institution per instance (perhaps 4-6), 1 course, 1 class, 2-30 students
*  Long term:  1 institution, 20 courses (over 4 years and 5 fields of study),  up to 5 classes each, up to 50 students in each class.   This does not mean there are 20 x 5 x 50 = 5,000 students in total because the total number of students will be much less.  It may be more like 1,000 students enrolled   across those 20 courses.  

Thus, for example, the prototype needs to support 30 concurrent student users and long term the application may have up to a 1,000 concurrent users.</Text>
        </Document>
        <Document ID="78B37435-786C-4911-8D49-3D30111B0635">
            <Title>Continuous Integration and Deployment</Title>
        </Document>
        <Document ID="773BD659-E9C6-43EA-AD60-4D4E307AFC8F">
            <Title>Jenkins</Title>
            <Text>WIP</Text>
        </Document>
        <Document ID="71839B83-8F41-4D71-9A27-2674AB2493B0">
            <Text>Courses
Status: &lt;$label&gt;
How many courses might this application be expected to support for the prototype stage?  For the long term?

Assumption: prototype stage has one course.

Beyond that the application may be extended, if further case studies are developed, to extend to many courses in one field of study.

Beyond that the application may be extended to support more than one field of study (e.g. doctor vs nurse vs specialist vs etc.)

Assumptions
*  Prototype:   1 course
*  Long term:  3 - 5 fields of study over 3 - 4 years ( 3 x 3 = 9, 5 x 4 = 20) up to 20 courses.</Text>
        </Document>
        <Document ID="694FB096-3485-49FE-881F-C165986DB0F4">
            <Title>Deployment Environments</Title>
        </Document>
        <Document ID="64C1FCE0-493E-4DCB-9A4B-2D05BEC5C1C0">
            <Text>Idomatic.js
All code in any code-base should look like a single person typed it, no matter how many people contributed.
https://github.com/rwaldron/idiomatic.js

A useful snippet to consider.
Projects must include some form of unit, reference, implementation or functional testing. Use case demos DO NOT QUALIFY as "tests". The following is a list of test frameworks, none of which are endorsed more than the other.

*  QUnit
*  Jasmine
*  Vows
*  Mocha
*  Hiro
*  JsTestDriver
*  Buster.js
*  Sinon.js
*  Tape</Text>
        </Document>
        <Document ID="B52ABCA0-8EE5-4078-A4C0-0D172AE13EDD">
            <Title>Composing ideas, concepts, overall, etc</Title>
            <Text>

</Text>
        </Document>
        <Document ID="DBA03BA7-7BF5-4FBA-A486-D3BAFA3EC072">
            <Title>Technical Elements</Title>
        </Document>
        <Document ID="FE7FDABC-654C-4422-9421-22A2B8A55473">
            <Text>Canvas
October
https://bccampus.ca/2013/12/18/canvas-is-coming-to-an-sfu-campus-near-you/
December 18, 2013
Next month, Simon Fraser University will complete its switch to Canvas—a new learning management system (LMS) used as a stand-alone platform by only one other post-secondary institution in Canada.
…
While Canvas is an open source, easy-to-use, cloud-native LMS, the university will host Canvas locally; that is, on servers physically located at SFU.

http://www.youtube.com/watch?v=m75VRa_1r2Y
http://www.proprofs.com/c/lms/exclusive-learning-management-system-best-practices/

</Text>
        </Document>
        <Document ID="3E2DE687-B25A-492D-BEEA-01E6468C55FA">
            <Text>Shibboleth
Shibboleth is an open-source project that provides Single Sign-On capabilities and allows sites to make informed authorization decisions for individual access of protected online resources in a privacy-preserving manner.</Text>
        </Document>
        <Document ID="E8B4CD32-A43B-40CE-B25C-83D84FE6C095">
            <Text>Frameworks
Dev and UX Designer agree to start using the Bulma CSS framework.  We chose Bulma for its simplicity hoping it supports rapid development.  
Resources
	•	https://bulma.io/
	•	https://bulma.io/documentation/overview/
Advantages
	•	Bulma is an open source CSS framework based on Flexbox and used by more than 100,000 developers.
	•	It is responsive, modular, modern and free.
	•	The simplist grid system
	•	A growing community
	•	So easy to learn
	•	So quick to customize
	•	Fullscreen vertical centering</Text>
        </Document>
        <Document ID="23D5FB00-42FC-463C-9F3F-221A463EEA55">
            <Title>Email system</Title>
            <Text>Email
Status: &lt;$label&gt;
To be considered after LTI and LMS research.  Perhaps the email function can be provided by the LMS

Nodemail
GoogleAPIs
Flask-Mailer (Python)</Text>
        </Document>
        <Document ID="3042A47C-10BD-42DD-9806-60FED6E42BB4">
            <Text>Question: Does BCcampus have a repro?</Text>
        </Document>
        <Document ID="9D7FCB4D-D87A-452D-86E4-424E3D94B45B">
            <Text>Performance testing

By the way, if you were hoping I could point you to a generic industry standard for good and bad performance, you’re out of luck because no such guide exists. There have been various informal attempts to define a standard, particularly for browser-based applications.
https://sqa.stackexchange.com/questions/15296/performance-requirements-for-web-application

Here are two sources of information to consider later.

Open Source Load Testing Tools: Which One Should You Use?

https://www.blazemeter.com/blog/open-source-load-testing-tools-which-one-should-you-use

JMeter

https://jmeter.apache.org/usermanual/get-started.html</Text>
        </Document>
        <Document ID="0F57AD73-AC73-4652-9162-5D091FAE1A34">
            <Title>Server side code</Title>
        </Document>
        <Document ID="AB26FC4D-0BDB-423D-9C46-ABA70E6FB9B8">
            <Text>Requirements
*  Support for Single Page Applications, Mobile Computing and Browsers (DSL support)
*  Industry standard. 
*  Suitable for prototyping. This is a huge project with a very short timeline. 
*  Dynamically typed with option to add datatypes when working with the database. 
*  Not verbose.  Language should favour clean and easy to read coding
*  Large community of developers to support this project in the future.
*  Modular (Separation of Concern).  Isolation of functionality is essential for stability. Once a component/module is ready and tested it should not be necessary to touch it again to adjust some other feature.
*  Testable.
*  Ideally use the same language for web, server and in between.
*  What is the developer best at? The team developer is most familiar with Javascript (Node JS) and is interested in working more with Python.

The contenders are:  Python, Javascript (Node JS), PhP, Go, and Ruby.  This analysis will not look too deeply into Go or Ruby because the former is too new and Ruby’s popularity may be diminishing. https://getpocket.com/a/read/2153732617</Text>
            <Notes>Ruby on Rails provides an easy way to build server-side web applications.
“There's a fair amount of debate swirling about whether Ruby and Ruby on Rails are dying. Advocates of the framework, though, will enthusiastically argue that this is still one of the best web programming languages to build apps quickly. Folks have been predicting Ruby's demise for several years now, and while Ruby is not as popular as it once was, it is unlikely to disappear.
In fact, in March 2018, the Tiobe index, which tracks the popularity of programming languages, reported Ruby had returned to its top 10 list. If Ruby is back in vogue, Ruby on Rails skills are a valuable asset.” Source https://getpocket.com/a/read/2153732617</Notes>
        </Document>
        <Document ID="F534C7C5-7764-4CDA-93AB-B4E967EE59BB">
            <Text>MongoDB
WIP

Recommendation:  Use MongoDB with Mongoose for schema</Text>
        </Document>
        <Document ID="929F58B1-6B1C-4884-9CBB-0769EAAA0BFE">
            <Title>Web Standards</Title>
        </Document>
        <Document ID="9478A115-80AB-440C-BF3E-492342ACEC90">
            <Text>Digital Ocean for pre-dev

I have an account and use Digital Ocean to spin up servers for my business.  I propose to use this service during early development to save time and energy worrying about how to get going.

Later, it will be essential to transition to the hosting domain where the prottype will reside.</Text>
        </Document>
        <Document ID="28F07C1E-6BF0-4850-930D-CF863A137963">
            <Title>Browser</Title>
            <Text>Client side coding language, for in the browser, is Javascript. There is no other choice. 
</Text>
        </Document>
        <Document ID="6D73608E-BBED-4287-BEC3-5D03CFC2496C">
            <Text>LTI
ComPAIR
https://ctlt.ubc.ca/about/contact-us/teaching-learning-technologies/

https://lthub.ubc.ca/guides/compair/
Exceprt:

Faculty and staff at UBC can most easily get started with ComPAIR by using Canvas. Through Canvas, you can set up a course in ComPAIR that will automatically be populated with your class list. The setup process is guided and only takes a few minutes.

Use ComPAIR in your Canvas course:

Add a ComPAIR link to your Canvas course's sidebar OR in a specific course module. You can follow the instructions below or contact the LT Hub for assistance with this step.
To add a link in the course's sidebar: Go to Settings in your Canvas course. Select the Navigation tab. Scroll down until you find ComPAIR. Click the gear, and select Enable.
To add a link in a course module: Go to Modules in your Canvas course. Press the "Add item" button on a specific module. Select External Tool from the drop-down menu. Select ComPAIR and then add the item.
After the course link is set up in Canvas, click on the link to create your ComPAIR course. (This step is required to properly link your Canvas and ComPAIR courses together.) If you are a completely new user in ComPAIR, you will first be prompted to create an account and then a course.
Note that because of how Canvas currently works, students also MUST follow the ComPAIR link from your Canvas course to initially register in your ComPAIR course. They cannot go to the ComPAIR website directly and try to log in there first; this will result in being denied access to ComPAIR and/or your ComPAIR course.

If you do not want to use Canvas to set up ComPAIR, you are welcome to log in to the application directly at compair.elearning.ubc.ca. From there, you can add a course and populate it manually using the "Import Users" option found on the "Manage Users" screen inside the course. Note that importing users requires some knowledge of how to download and edit a CSV file of your course's students and means you will need to manage the class list manually (i.e., updating when students add or drop).

Linking directly to a ComPAIR assignment via LTI
Once you have set up a ComPAIR course and assignments, you can link directly to ComPAIR assignments from Canvas. This is useful if you want to send students to specific assignments from specific modules of your Canvas course and/or you want to enable automatic grade pass-back from ComPAIR assignments to Canvas.

To create an assignment link in Canvas:

Go to ComPAIR and edit the assignment you want to link to.
Click the "Copy?" link at the top right of the edit assignment screen. This will copy the information you need to enter in Canvas.
Now switch to Canvas and add an assignment, with a submission type of external tool and ComPAIR selected as the external tool.
At the end of the "External Tool URL" field, type a question mark (?), then paste the value you copied from ComPAIR. This will mean the "External Tool URL" will ultimately something look like this: compair.elearning.ubc.ca/api/lti/auth?assignment=* * * * * * * * 
Select "Load This Tool In A New Tab".
Save the assignment. When students click on the assignment in Canvas, it will take them directly to the assignment in ComPAIR.
Note that to pass participation grades automatically from ComPAIR to Canvas for a given assignment, every student will need to click this Canvas link to the ComPAIR assignment once. Clicking the link opens up the Canvas-ComPAIR connection for that student's grade.
-=-=-=-= End Excerpt -=-=-=-=</Text>
        </Document>
        <Document ID="FA4CC889-49F2-423E-B437-7AB213037F3D">
            <Title>Client side code</Title>
        </Document>
        <Document ID="BBAFCE46-9D94-48E5-84D9-DE73A7775D43">
            <Title>Interoperability</Title>
            <Text>Status: &lt;$label&gt;
I found a few resources to help get started with LTI:

About
	•	This thread is packed with some good questions, answers and the links to most of what I've listed below: https://community.canvaslms.com/thread/13467-how-can-i-get-started-building-an-lti-external-application  
	•	Another branch of that thread: https://community.canvaslms.com/thread/13468-how-can-i-get-started-building-an-lti-external-application  
	•	Course on building LTIs: https://canvas.instructure.com/courses/785215/modules  
	•	Three-part blog on building LTI (.NET): https://community.canvaslms.com/groups/canvas-developers/blog/2016/09/13/net-lti-project-part- 
Examples:
	•	Roll-call tool/assignment: https://support.perceivant.com/hc/en-us/articles/115015942867-What-is-the-Roll-Call-Attendance-Tool- (GitHub: https://github.com/instructure/rollcall-attendance ) 
	•	Ruby LTI project: https://github.com/instructure/ims-lti 
</Text>
        </Document>
        <Document ID="375F2158-CE11-475F-9E04-31B1B57B1D4A">
            <Title>Media Attachments</Title>
            <Text>Media Attachments
Status: &lt;$label&gt;
Depends on how much video is required and if this is required for MVP.  It will be relatively easy to provide links to video hosted on external sites. To serve video from inside EdEHR requires special consideration, research, tooling and servers that have both the space and capability. Probably would need to consider seperate servers to stream video to maintain performance in the main application.

Kaltura for video content.  This is perhaps the tool used in ComPAIR. Not sure.
https://corp.kaltura.com/
Also see the BCCampus story about Kaltura
https://bccampus.ca/2013/05/23/wrangling-videos-in-one-location-just-got-a-lot-easier-with-kaltura/</Text>
        </Document>
        <Document ID="F01A5EE2-FD43-47A2-992C-E958A3E70615">
            <Text>Production Server

SFU will be hosting the prototype.  Later we can learn how they will allocating the servers and what limitations they may impose.   At this time we lack a clear understanding of what performance and space requirements EdEHR has.


Test environment
*  2 - 4 GB RAM per core
*  2 - 4 cores (to allow testing of application scaled to match production
*  Standard hard drive, 10-20 GB free.
*  Network connectivity.

Production
*  4 Cores
*  4 GB RAM per core.
*  Standard hard drive, 50-100 GB free.
*  Network connectivity.


</Text>
        </Document>
        <Document ID="A0989A04-3ABD-4A20-B9FB-A3C1ACC6EE15">
            <Title>Test Tools</Title>
        </Document>
        <Document ID="C06C330C-4101-4436-951B-5F5C28099553">
            <Text>BURP suite security testing</Text>
        </Document>
        <Document ID="D5D2540C-82B2-467B-91AA-15346D922169">
            <Text>PhP

PhP is the industry standard having been around for over two decades. Yet it is known for its verbosity and difficulty to be modular.
PhP Pros:
*  Rich code base
*  Portable
*  Designed to generate web pages
PhP Cons:
*  Inefficient separation of concerns (modularity)
*  Outdated client server model (not SPA)
*  Different language than used on the client side.

Not the best choice for EdEHR</Text>
        </Document>
        <Document ID="5045E77E-6D90-4CBE-BDF2-D03E2B3F7309">
            <Title>Ruby</Title>
        </Document>
        <Document ID="CF6ADF73-4FC4-43EB-8FE7-C0DDF8A50B15">
            <Title>Testing Server Side</Title>
            <Text>Status: &lt;$label&gt;
Must implement automated testing for server side and ideally client side code.  This is expensive to do but invaluable in later stages of development.  Acknowledge that 100% coverage is not possible so testing, inherently, has trade-offs.  Testing the core functionality along with all edge cases that surfaced as defects should be considered core.  This at least provides confidence if at some later stage we need to refactor or adjust code that is new the core functionality.  

As defects arise try to first create a test script to replicate the defect.  TDD

BDD Behavior Driven Development is appropriate for the core functionality because it is directly connected with actual user behaviors (e.g. use cases) and is more comprehensive than a series of units tests (Test Drive Development).

BDD and TDD are the same, in that both require the developer to compose the test first. The test fails until the development is complete.

Testing is related to the topic of Automated Testing </Text>
        </Document>
        <Document ID="65B5D56C-5334-4CF0-B4D4-C74A07CAC093">
            <Title>Code Standards and Linting</Title>
            <Text>As every language, JavaScript has many code style guides.  Consider the following.</Text>
        </Document>
        <Document ID="856DA8F1-F8FC-496B-A21D-E5906C354E0E">
            <Text>Google Javascript Standard for ECMA 6th edition
https://google.github.io/styleguide/jsguide.html
“A JavaScript source file is described as being in Google Style if and only if it adheres to the rules herein”</Text>
        </Document>
        <Document ID="61A0AAA4-4CBF-4094-9423-7D12FCB530C7">
            <Title>Testing Security</Title>
            <Text>Status: &lt;$label&gt;</Text>
        </Document>
        <Document ID="7508B6DD-B8BB-44B2-8733-D32B3A1ACF1A">
            <Text>Npm install
The system will be built to make installation as simple as:
1. Git clone
2. Npm install
3. Npm start
</Text>
        </Document>
        <Document ID="8E0F5DBF-FE36-47C4-9285-3D16C66C9B3A">
            <Title>Source Control</Title>
        </Document>
        <Document ID="9AC35995-C32A-40D4-A026-A29445530793">
            <Text>Angular

https://en.wikipedia.org/wiki/Angular_(application_platform)

Angular is supported by Google and a large open source community. There are two main flavors: Angular and AngularJS.  The latter is the older version and is sometimes called Angular 1.x.  The former is the newer rewrite and for a time was called Angular 2.0.   There is no point considering AngularJS for a new project because Angular is far superior. That said, Angular is a framework suited to large projects with many team members because it provides a lot of features and supports the complexity in these types of projects.  

*  Flexible: no
*  Easy to learn: know to have a steep learning curve
*  Documentation: yes
*  Supports single page applications:  yes
*  Code Style:  Complex
*  Single File Components: no
*  License: MIT
*  Performance:  Reasonable
*  Tooling:  Yes
*  Routing (click to next ‘page’ in app with back button history): yes
*  State management (track what stage of a process the user is at): yes
*  Mobile:  Not sure.
*  Community:  Large and well established
*  Maturity:  Hard to say because Angular is such a radical change from AngularJS. No’ish
*  Support:  Google
*  Hiring Talent:  Yes
*  Future:  not sure

https://medium.com/fundbox-engineering/react-vs-vue-vs-angular-163f1ae7be56

Angular grew to become a big framework that can be helpful in building complex systems but is less useful for building startup fast-changing UIs. React and Vue are more light-weight, and components are meant to be small, autonomous, encapsulated, hence — easily reusable. If we were to develop a new infrastructure from scratch (and not needing to migrate from an existing one), we could have been considering Angular too. In our case, it didn’t fit.

EdEHR recommendation: skip Angular</Text>
        </Document>
        <Document ID="83645849-D53C-475D-A605-108ACBFB7D13">
            <Text>BC gov resource:
Status: &lt;$label&gt;

https://github.com/bcgov/BC-Policy-Framework-For-GitHub/tree/master/BC-Open-Source-Development-Employee-Guide
and specifically (with a couple of useful decision trees): 
https://github.com/bcgov/BC-Policy-Framework-For-GitHub/blob/master/BC-Open-Source-Development-Employee-Guide/Licenses.md 

The implications of the licenses of the tools we use in the product must be respected/compatible when making decisions on how to license the EdEHR.  Here's an example from the open text book project.

https://github.com/BCcampus/opentextbooks/blob/dev/README.md#copyright-and-license

Dave is researching the license issue.</Text>
        </Document>
        <Document ID="170208F4-27FD-4B24-8653-7C5C493B9EC2">
            <Title>Document management, upload</Title>
            <Text>Status: &lt;$label&gt;
Multer to support multi-part document uploads
Seperately mounted disk for storage outside of application code space
</Text>
        </Document>
        <Document ID="E6E6F6A3-85AF-42E1-AAC9-BD94CDBFAB31">
            <Text>Linux based

We will not be tied to any particular version of linux. Debian, Ubunto, etc are all fine.</Text>
        </Document>
        <Document ID="DB22027D-9AFF-440C-89BC-EA13AD2664D1">
            <Text>React

React is supported by Facebook and has a large open source community.  It is definitely the most popular framework.
References: 
*  https://en.wikipedia.org/wiki/React_(JavaScript_library)
*  https://blog.techmagic.co/reactjs-vs-angular5-vs-vue-js-what-to-choose-in-2018/
*  https://medium.com/fundbox-engineering/react-vs-vue-vs-angular-163f1ae7be56

Companies that use ReactJS: Facebook, Instagram, Netflix, New York Times, Yahoo, Khan Academy, Whatsapp, Codecademy, Dropbox, Airbnb, Asana, Atlassian, Intercom, Microsoft.

EdEHR requirements:  (quotes from above sources in italics)
*  Flexible: yes
*  Easy to learn: easier than Angular yet takes a long time to master.  “React requires to (sic) learn a lot to become an expert. Would require much more time to train devs. Deliver slower (at least for the initial heavy lifting).”
*  Documentation:  Lack of official documentation — super-fast development of ReactJS leaves no place for the proper documentation which is a bit chaotic now as many developers contribute it individually without any systematic approach;
*  Supports single page applications: Yes
*  Code Style:  Clean yet developers sometimes have too much choice; sometimes difficult to separate code between back end and front end
*  Single File Components:  Yes, nicely
*  License: MIT. (There is an interesting story to read about how Facebook released React with a series of different open source licenses that caused a lot of controversy. https://en.wikipedia.org/wiki/React_(JavaScript_library)#Licensing_controversy  Now, React is released under the very permissive MIT license.)
*  Performance:  Yes
*  Tooling:  Yes
*  Routing: Needs plugin (which one to pick?)
*  State management: not sure
*  API: Yes
*  Mobile:  Web and mobile apps can share some code.
*  Community: Large yet fragmented
*  Maturity:  Industry standard.
*  Support: Yes
*  Hiring Talent: Yes
*  Future:  Facebook provides  “codemods” to automate much of the upgrade process. </Text>
        </Document>
        <Document ID="AB6760D2-0EC8-412B-8B9F-0F20DF24F8ED">
            <Title>Server Tooling</Title>
        </Document>
        <Document ID="DF643E0B-3E63-458D-945D-C0CF3EC8B1F9">
            <Title>Docker</Title>
            <Text>WIP</Text>
        </Document>
        <Document ID="FB1F184F-5027-47D9-8250-6F687B0CC87E">
            <Title>Hosting</Title>
        </Document>
        <Document ID="964C33D3-C32F-49C9-A275-38612CC4F8C2">
            <Text>JavaScript Standard Style Guide. https://github.com/standard/standard

JavaScript style guide, with linter &amp; automatic code fixer. No configuration. Automatically format code. Catch style issues &amp; programmer errors early.

This style guide is used by many tech companies including NPM, GitHub, mongoDB, and ZenDesk.

To add a badge to the project readme include this markup
```
[![JavaScript Style Guide](https://cdn.rawgit.com/standard/standard/master/badge.svg)](https://github.com/standard/standard)
```

[![JavaScript Style Guide](https://cdn.rawgit.com/standard/standard/master/badge.svg)](https://github.com/standard/standard)</Text>
        </Document>
        <Document ID="3BF8F5FE-902D-4401-88A4-57132EF56B3C">
            <Title>Testing UI</Title>
            <Text>Status: &lt;$label&gt;</Text>
        </Document>
        <Document ID="C42A7C98-5145-41AE-BAF6-8450B76FAAD5">
            <Text>Javascript and Node.js
“Unlike PHP, Node.js is not a language, but a runtime environment that uses JavaScript for the server-side application development. Launched in 2009, Node.js has demonstrated the power of JavaScript in building event-based, data-driven, I/O-heavy applications for the Web 2.0 era.” https://www.netguru.co/blog/nodejs-vs-php

Javascript and Node.js Pros:
*  Support for Single Page Applications, Mobile Computing and Browsers (DSL support)
*  Industry standard. 
*  Suitable for prototyping
*  Dynamically typed with option to add datatypes when working with the database. 
*  Medium verbosity.
*  Large community of developers.
*  Modular (Separation of Concern)
*  Testable.
*  One language across the full stack
*  What is the developer best at?
*  Fast server side
*  Portable

Javascript and Node.js Cons:
*  Less efficient at handling CPU intensive applications. (This is not a requrement for EdEHR)
*  JavaScript and Node.js are not quite as extensible as Python.

Use Javascript ECMA 2016 or better.</Text>
            <Notes>Javascript allows developers to use transpiler tools like Babel and Domain-specific Languages (DSL) to experiment with and/or create a new syntax that optimises UI development and makes it faster. The Python community does not have an equivalent mechanism for experimenting with DSLs, which makes it more difficult to express UI code in Python compared to Javascript and Node.js.
</Notes>
        </Document>
    </Documents>
</SearchIndexes>